
  Section A. Vue, Vue CLI

  Step 1.

  Create a new project
  Open VS Code
  In terminal window
    Change directory to top level development folder <dev>
      $ cd dev
    Create a new project with VUE CLI ...

      $ vue create <project>
      
      Vue CLI v3.8.2
      ? Please pick a preset: Manually select features
      ? Check the features needed for your project: Babel, Router, Vuex, Linter
      ? Use history mode for router? (Requires proper server setup for index fallback in production) Yes
      ? Pick a linter / formatter config: Prettier
      ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save
      ? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files
      ? Save this as a preset for future projects? (y/N)

      Vue CLI v3.8.2
      ‚ú®  Creating project in /mnt/c/Users/Dominic/dev/<project>.
      üóÉ  Initializing git repository...
      ‚öô  Installing CLI plugins. This might take a while...
      . . .
      ‚öì  Running completion hooks...

      ‚†ã  Generating README.md...(node:315) ExperimentalWarning: The fs.promises API is experimental
      üìÑ  Generating README.md...

      üéâ  Successfully created project <porject>.
      üëâ  Get started with the following commands:

      $ cd <project>
      $ npm run serve

Section B. Github setup

Step 1.
  Create a new repo on Github.
  Do not initialize the new repository with README, license, or gitignore files.
  At the top of GitHub repository's Quick Setup page, copy the remote repository URL.

Step 2.
  Open VS Code
    In VS Code select File> Add Folder to Workspace> <select newly created folder>
 
  Select Terminal> New Terminal

  In terminal window...
  Change directory to project folder <project>
    $ cd <project>
    
    If not already configured...
      $ git config --global user.name "Dominic Moran"
      $ git config --global user.email dominic.moran@gmail.com
      $ git config --global core.autocrlf true
      $ git config --global push.default simple
      $ git config -- list
        user.email=dominic.moran@gmail.com
        user.name=Dominic Moran
        core.autocrlf=input
        push.default=simple

Step 3.  
  Add the URL for the remote repository where local repository will be pushed
    Set the new remote...
      $ git remote add origin <remote repository URL>
    Verify the new remote URL
      $ git remote -v
    Push the changes in your local repository to GitHub.
      $ git push origin master
      
Section C. Firebase

Step 1.
Create a Firebase project.

Log in to Firebase console
Select New project
Enter project name (at least 4 characters)
Select Create project
Select continue when ready

Step 2.
Register app.

Select Add firebase to your web app ( </>)
Enter a nickname for app
Copy the scripts (firebase config)
continue to console

Step 3.
Authentication.
Choose a product to add to your app
Select Auth
Select Set up sign-in method
Select and enable Email/Password and Save

Step 4.
Database.
Select Database
Select Ceate database (Cloud Firestore)
Select Start in test mode, then Enable

Step 5.
Add Firebase SDKs and initialize Firebase
Select Using module bundlers

Install the Firebase JavaScript SDK:

If you don't already have a package.json file, 
create one by running the following command from 
the root of your JavaScript project:

$ npm init

Install the firebase npm package and save 
it to your package.json file by running:

$ npm install --save firebase

Step 6.
Create file in src root firebaseConfig.json
Copy API key etc. from copied scripts (above)

Section D. Firebase Tools
Step 1.
  $ npm install -g firebase-tools
  Also (keep up tp date)
    $ npm install firebase-functions@latest firebase-admin@latest --save
Step 2.
Run
  $ firebase init functions

Section E. Firebase Hosting
Step 1.
 $ npm install -g firebase-tools (in not already done)
 $ firebase login
 Check login worked
 $ firebase list

Step 2.
  $ firebase init

? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices.
 ‚óØ Database: Deploy Firebase Realtime Database Rules
 ‚óØ Firestore: Deploy rules and create indexes for Firestore
 ‚óØ Functions: Configure and deploy Cloud Functions
‚ùØ‚óâ Hosting: Configure and deploy Firebase Hosting sites
 ‚óØ Storage: Deploy Cloud Storage security rules

 Choose Hosting (spacebar)


=== Hosting Setup

Your public directory is the folder (relative to your project directory) that
will contain Hosting assets to be uploaded with firebase deploy. If you
have a build process for your assets, use your build's output directory.

? What do you want to use as your public directory? dist
Input dist

=== Hosting Setup

Your public directory is the folder (relative to your project directory) that
will contain Hosting assets to be uploaded with firebase deploy. If you
have a build process for your assets, use your build's output directory.

? What do you want to use as your public directory? dist
? Configure as a single-page app (rewrite all urls to /index.html)? Yes
? File dist/index.html already exists. Overwrite? No
i  Skipping write of dist/index.html

i  Writing configuration info to firebase.json...
i  Writing project information to .firebaserc...

‚úî  Firebase initialization complete!

Step 3.
Deploy
  $ firebase deploy
  

Section F. Tailwind (CSS)
Step 1.
 $ npm install tailwindcss --save-dev

Step 2.
Create main.css in src/assets/css
  contains
    @tailwind base;
    @tailwind components;
    @tailwind utilities;
Import in App.vue 
  <style>@import "./assets/css/main.css";</style>

Step 3.
Update postcss.config.js in project root to
  module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {}
    }
  };
